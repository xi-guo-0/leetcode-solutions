#!/usr/bin/env racket
#lang racket

(define/contract (is-valid-sudoku board)
  (-> (listof (listof char?)) boolean?)
  (define (valid-row? row)
    (let ([filled (filter (lambda (x) (not (char=? x #\.))) row)])
      (let ([set (remove-duplicates filled)]) (= (length set) (length filled)))))
  (define (valid-column? board col-index)
    (let ([col (map (lambda (row) (list-ref row col-index)) board)]) (valid-row? col)))
  (define (valid-sub-grid? board row-index col-index)
    (let ([sub-grid (for/list ([r (in-range (* 3 row-index) (* 3 (+ row-index 1)))])
                      (for/list ([c (in-range (* 3 col-index) (* 3 (+ col-index 1)))])
                        (list-ref (list-ref board r) c)))])
      (valid-row? (apply append sub-grid))))
  (and (for/and ([row (in-range 9)])
         (valid-row? (list-ref board row)))
       (for/and ([col (in-range 9)])
         (valid-column? board col))
       (for/and ([r (in-range 3)])
         (for/and ([c (in-range 3)])
           (valid-sub-grid? board r c)))))

(module+ test
  (require rackunit)
  (check-true (is-valid-sudoku '((#\5 #\3 #\. #\. #\7 #\. #\. #\. #\.)
                                 (#\6 #\. #\. #\1 #\9 #\5 #\. #\. #\.)
                                 (#\. #\9 #\8 #\. #\. #\. #\. #\6 #\.)
                                 (#\8 #\. #\. #\. #\6 #\. #\. #\. #\3)
                                 (#\4 #\. #\. #\8 #\. #\3 #\. #\. #\1)
                                 (#\7 #\. #\. #\. #\2 #\. #\. #\. #\6)
                                 (#\. #\6 #\. #\. #\. #\. #\2 #\8 #\.)
                                 (#\. #\. #\. #\4 #\1 #\9 #\. #\. #\5)
                                 (#\. #\. #\. #\. #\8 #\. #\. #\7 #\9))))
  (check-false (is-valid-sudoku '((#\8 #\3 #\. #\. #\7 #\. #\. #\. #\.)
                                  (#\6 #\. #\. #\1 #\9 #\5 #\. #\. #\.)
                                  (#\. #\9 #\8 #\. #\. #\. #\. #\6 #\.)
                                  (#\8 #\. #\. #\. #\6 #\. #\. #\. #\3)
                                  (#\4 #\. #\. #\8 #\. #\3 #\. #\. #\1)
                                  (#\7 #\. #\. #\. #\2 #\. #\. #\. #\6)
                                  (#\. #\6 #\. #\. #\. #\. #\2 #\8 #\.)
                                  (#\. #\. #\. #\4 #\1 #\9 #\. #\. #\5)
                                  (#\. #\. #\. #\. #\8 #\. #\. #\7 #\9)))))
