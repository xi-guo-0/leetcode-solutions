#include <algorithm>
#include <iostream>
#include <unordered_set>
#include <vector>

using namespace std;

class Solution {
public:
  void dfs(int node, const vector<vector<int>> &graph, vector<bool> &infected) {
    infected[node] = true;
    for (int neighbor = 0; neighbor < graph.size(); ++neighbor) {
      if (graph[node][neighbor] == 1 && !infected[neighbor]) {
        dfs(neighbor, graph, infected);
      }
    }
  }

  int minMalwareSpread(vector<vector<int>> &graph, vector<int> &initial) {
    int n = graph.size();
    vector<bool> infected(n, false);
    unordered_set<int> initial_set(initial.begin(), initial.end());
    int min_infected = INT_MAX;
    int min_node = -1;

    for (int i = 0; i < initial.size(); ++i) {
      int removed_node = initial[i];
      infected.assign(n, false);

      for (int j = 0; j < initial.size(); ++j) {
        if (initial[j] != removed_node) {
          infected[initial[j]] = true;
        }
      }

      for (int j = 0; j < initial.size(); ++j) {
        if (initial[j] != removed_node) {
          dfs(initial[j], graph, infected);
        }
      }

      int infected_count = count(infected.begin(), infected.end(), true);

      if (infected_count < min_infected ||
          (infected_count == min_infected && removed_node < min_node)) {
        min_infected = infected_count;
        min_node = removed_node;
      }
    }

    return min_node;
  }
};

int main() { return 0; }
