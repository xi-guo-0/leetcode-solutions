#include <vector>

using namespace std;

class Solution {
public:
  int minMalwareSpread(vector<vector<int>> &graph, vector<int> &initial) {
    int n = graph.size();
    vector<bool> isInitial(n, false);
    for (int v : initial) {
      isInitial[v] = true;
    }

    vector<vector<int>> infectedBy(n);
    for (int v : initial) {
      vector<bool> visited(n, false);
      dfs(graph, isInitial, visited, v);
      for (int u = 0; u < n; ++u) {
        if (visited[u] && u != v) {
          infectedBy[u].push_back(v);
        }
      }
    }

    vector<int> count(n, 0);
    for (int u = 0; u < n; ++u) {
      if (infectedBy[u].size() == 1) {
        count[infectedBy[u][0]]++;
      }
    }

    int res = initial[0];
    for (int v : initial) {
      if (count[v] > count[res] || (count[v] == count[res] && v < res)) {
        res = v;
      }
    }

    return res;
  }

private:
  void dfs(vector<vector<int>> &graph, vector<bool> &isInitial,
           vector<bool> &visited, int v) {
    int n = graph.size();
    for (int u = 0; u < n; ++u) {
      if (graph[v][u] == 1 && !visited[u] && !isInitial[u]) {
        visited[u] = true;
        dfs(graph, isInitial, visited, u);
      }
    }
  }
};

int main() { return 0; }
